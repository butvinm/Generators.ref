*$FROM Generators.ref
$EXTERN
  Gen-Iter,
  Gen-Range,
  Gen-Filter,
  Gen-TakeWhile,
  Gen-Filter,
  Gen-DropWhile,
  Gen-Chain,
  Gen-Map,
  Gen-Reduce,
  Gen-Pipe,
  Gen-Take,
  Gen-FromList,
  Gen-Empty,
  Gen-ChopHead;


*$FROM LibraryEx
$EXTERN Map, Inc, Fetch;


$ENTRY Go {
  = <Map
    { Success = ; Fail = <Exit 1>; }
    <Test-Gen-Iter>
    <Test-Gen-Range>
    <Test-Gen-TakeWhile>
    <Test-Gen-Filter>
    <Test-Gen-DropWhile>
    <Test-Gen-Chain>
    <Test-Gen-Map>
    <Test-Gen-Reduce>
    <Test-Gen-Pipe>
    <Test-Gen-Take>
    <Test-Gen-FromList>
    <Test-Gen-ChopHead>
  >
}


Assert {
  (e.Expected) e.Expected
    = <Prout '\x1b[32mSuccess\x1b[0m: ' (e.Expected ' == ' e.Expected)> :
    = Success;
  (e.Res) e.Expected
    = <Prout '\x1b[31mFail\x1b[0m: ' (e.Res ' == ' e.Expected)> :
    = Fail;
}


Fib {
   = (1 1) 1;

  (s.PP s.P)
    = <Add s.PP s.P> : s.Next
    = (s.P s.Next) s.Next;
}


FibBounded {
  s.Bound () = (1 1) 1;

  s.Bound (s.PP s.P), <Compare s.Bound s.P> : '+'
    = <Add s.PP s.P> : s.Next
    = (s.P s.Next) s.Next;

  s.Bound (s.PP s.P) = Gen-Stop;
}


Invert {
  s.Pred =
    {
      e.Val = <s.Pred e.Val> : { True = False; False = True; }
    }
}


LessThan {
  e.Bound
    = {
      e.Val = <Compare (e.Bound) e.Val> : { '+' = True; e._ = False; }
    }
}


IsEven {
  e.Val = <Mod (e.Val) 2> : { 0 = True; e._ = False; }
}



Test-Gen-Iter {
  = <Prout Test-Gen-Iter>
    <Assert
      (<Gen-Iter (&FibBounded 13)>)
      (1)(2)(3)(5)(8)(13)
    >
    <Assert
      (<Gen-Iter (&FibBounded 21) (3 5)>)
      (8)(13)(21)
    >
}


Test-Gen-Range {
  = <Prout Test-Gen-Range>
    <Assert
      (<<Gen-Range> ()>)
      ((1) (Inf) 1) 0
    >
    <Assert
      (<Gen-Iter <Gen-Range 0 5>>)
      (0)(1)(2)(3)(4)
    >
    <Assert
      (<Gen-Iter <Gen-Range 0 10 2>>)
      (0)(2)(4)(6)(8)
    >
    <Assert
      (<Gen-Iter <Gen-Range 3 10 2>>)
      (3)(5)(7)(9)
    >
    <Assert
      (<Gen-Iter <Gen-Range 3 10 3>>)
      (3)(6)(9)
    >
    <Assert
      (<Gen-Iter <Gen-Range (1 0) (1 10) 1>>)
      (1 0)(1 1)(1 2)(1 3)(1 4)(1 5)(1 6)(1 7)(1 8)(1 9)
    >
}


Test-Gen-TakeWhile {
  = <Prout Test-Gen-TakeWhile>
    <Assert
      (<Gen-Iter
        <Gen-TakeWhile
          <LessThan 5>
          <Gen-Range>
        >
      >)
      (0)(1)(2)(3)(4)
    >
    <Assert
      (<Gen-Iter
        <Gen-TakeWhile
          <LessThan 5>
          <Gen-Range 0 3>
        >
      >)
      (0)(1)(2)
    >
}


Test-Gen-Filter {
  = <Prout Test-Gen-Filter>
    <Assert
      (<Gen-Iter
        <Gen-Filter
          <LessThan 5>
          <Gen-Range 0 10>
        >
      >)
      (0)(1)(2)(3)(4)
    >
    <Assert
      (<Gen-Iter
        <Gen-Filter
          <Invert <LessThan 5>>
          <Gen-Range 0 10>
        >
      >)
      (5)(6)(7)(8)(9)
    >
    <Assert
      (<Gen-Iter
        <Gen-Filter
          &IsEven
          <Gen-Range 0 10>
        >
      >)
      (0)(2)(4)(6)(8)
    >
}


Test-Gen-DropWhile {
  = <Prout Test-Gen-DropWhile>
    <Assert
      (<Gen-Iter
        <Gen-DropWhile
          <LessThan 5>
          <Gen-Range 0 10>
        >
      >)
      (5)(6)(7)(8)(9)
    >
    <Assert
      (<Gen-Iter
        <Gen-DropWhile
          <LessThan 5>
          <Gen-Range 0 3>
        >
      >)
    >
}


Test-Gen-Chain {
  = <Prout Test-Gen-Chain>
    <Assert
      (<Gen-Iter
        <Gen-Chain
          <Gen-Range 0 5>
          <Gen-Range 5 10>
          <Gen-Range 10 15>
        >
      >)
      (0)(1)(2)(3)(4)(5)(6)(7)(8)(9)(10)(11)(12)(13)(14)
    >
    <Assert
      (<Gen-Iter
        <Gen-Chain
          <Gen-Filter &IsEven <Gen-Range 0 5>>
          <Gen-Filter <Invert &IsEven> <Gen-Range 5 10>>
        >
      >)
      (0)(2)(4)(5)(7)(9)
    >
}


Test-Gen-Map {
  = <Prout Test-Gen-Map>
    <Assert
      (<Gen-Iter
        <Gen-Map
          { e.Val = <Mul 3 e.Val> }
          <Gen-Range 0 5>
        >
      >)
      (0)(3)(6)(9)(12)
    >
    <Assert
      (<Gen-Iter
        <Gen-Map
          { e.Val = <Mul 3 e.Val> }
          <Gen-Range 0 0>
        >
      >)
    >
}


Test-Gen-Reduce {
  = <Prout Test-Gen-Reduce>
    <Assert
      (<Gen-Reduce
        &Add
        0
        <Gen-Range 0 5>
      >)
      10
    >
    <Assert
      (<Gen-Reduce
        &Add
        5
        <Gen-Range 0 5>
      >)
      15
    >
    <Assert
      (<Gen-Reduce
        &Add
        0
        <Gen-Range 0 0>
      >)
      0
    >
    <Assert
      (<Gen-Reduce
        { (e.Acc) e.Val = e.Acc e.Val }
        42 69
        <Gen-Range 0 5>
      >)
      42 69 0 1 2 3 4
    >
}


Test-Gen-Pipe {
  = <Prout Test-Gen-Pipe>
    <Assert
      (<Gen-Iter <Fetch <Gen-Pipe>>>)
      () /* yet cannot consider should Gen-Iter wrap an empty result */
    >
    <Assert
      (<Gen-Iter
        <Fetch
          <Gen-Pipe
            { = <Gen-Range 1 3> }
            { t.A = <Gen-Map { t.B = t.A t.B} <Gen-Range <Inc t.A> 4>> }
            { t.A t.B = <Gen-Map { t.C = t.A t.B t.C} <Gen-Range <Inc t.B> 5>> }
          >
        >
      >)
      (1 2 3 )(1 2 4 )(1 3 4 )(2 3 4 )
    >
    <Assert
      (<Gen-Iter
        <Fetch
          <Gen-Pipe
            <Gen-Pipe>
            <Gen-Pipe { = <Gen-Range 1 3> }>
            <Gen-Pipe>
            <Gen-Pipe { t.A = <Gen-Map { t.B = t.A t.B} <Gen-Range <Inc t.A> 4>> }>
            <Gen-Pipe>
            <Gen-Pipe { t.A t.B = <Gen-Map { t.C = t.A t.B t.C} <Gen-Range <Inc t.B> 5>> }>
            <Gen-Pipe>
          >
        >
      >)
      (1 2 3 )(1 2 4 )(1 3 4 )(2 3 4 )
    >;
}


Test-Gen-Take {
  = <Prout Test-Gen-Take>
    <Assert
      (<Gen-Iter <Gen-Take <Gen-Range>>>)
      (0 )
    >
    <Assert
      (<Gen-Iter <Gen-Take 5 <Gen-Range>>>)
      (0 )(1 )(2 )(3 )(4 )
    >
    <Assert
      (<Gen-Iter <Gen-Take 5 <Gen-Range 0 3>>>)
      (0 )(1 )(2 )
    >
    <Assert
      (<Gen-Iter <Gen-Take 0 <Gen-Range>>>)
      /* empty */
    >;
}


Test-Gen-FromList {
  = <Prout Test-Gen-FromList>
    <Assert
      (<Gen-Iter <Gen-FromList (1 )(2 )(3 )(4 )(5 )>>)
      (1 )(2 )(3 )(4 )(5 )
    >
    <Assert
      (<Gen-Iter <Gen-FromList /* empty */>>)
      /* empty */
    >;
}


Test-Gen-ChopHead {
  = <Prout Test-Gen-FromList>
    <Assert
      (<{ t.H t.T = Head t.H Tail <Gen-Iter t.T> } <Gen-ChopHead <Gen-Range 0 5>>>)
      Head 0 Tail (1 )(2 )(3 )(4 )
    >
    <Assert
      (<{ t.H t.T = Head t.H Tail <Gen-Iter t.T> } <Gen-ChopHead <Gen-Empty>>>)
      Head Gen-Stop Tail
    >;
}
